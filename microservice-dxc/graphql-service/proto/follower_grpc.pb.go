// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: follower.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowUserServiceClient is the client API for FollowUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowUserServiceClient interface {
	FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error)
	ListFollowers(ctx context.Context, in *ListFollowersRequest, opts ...grpc.CallOption) (*ListFollowersResponse, error)
	ListFollowing(ctx context.Context, in *ListFollowingRequest, opts ...grpc.CallOption) (*ListFollowingResponse, error)
}

type followUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowUserServiceClient(cc grpc.ClientConnInterface) FollowUserServiceClient {
	return &followUserServiceClient{cc}
}

func (c *followUserServiceClient) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error) {
	out := new(FollowUserResponse)
	err := c.cc.Invoke(ctx, "/proto.FollowUserService/FollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followUserServiceClient) ListFollowers(ctx context.Context, in *ListFollowersRequest, opts ...grpc.CallOption) (*ListFollowersResponse, error) {
	out := new(ListFollowersResponse)
	err := c.cc.Invoke(ctx, "/proto.FollowUserService/ListFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followUserServiceClient) ListFollowing(ctx context.Context, in *ListFollowingRequest, opts ...grpc.CallOption) (*ListFollowingResponse, error) {
	out := new(ListFollowingResponse)
	err := c.cc.Invoke(ctx, "/proto.FollowUserService/ListFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowUserServiceServer is the server API for FollowUserService service.
// All implementations must embed UnimplementedFollowUserServiceServer
// for forward compatibility
type FollowUserServiceServer interface {
	FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error)
	ListFollowers(context.Context, *ListFollowersRequest) (*ListFollowersResponse, error)
	ListFollowing(context.Context, *ListFollowingRequest) (*ListFollowingResponse, error)
	mustEmbedUnimplementedFollowUserServiceServer()
}

// UnimplementedFollowUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowUserServiceServer struct {
}

func (UnimplementedFollowUserServiceServer) FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedFollowUserServiceServer) ListFollowers(context.Context, *ListFollowersRequest) (*ListFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowers not implemented")
}
func (UnimplementedFollowUserServiceServer) ListFollowing(context.Context, *ListFollowingRequest) (*ListFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowing not implemented")
}
func (UnimplementedFollowUserServiceServer) mustEmbedUnimplementedFollowUserServiceServer() {}

// UnsafeFollowUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowUserServiceServer will
// result in compilation errors.
type UnsafeFollowUserServiceServer interface {
	mustEmbedUnimplementedFollowUserServiceServer()
}

func RegisterFollowUserServiceServer(s grpc.ServiceRegistrar, srv FollowUserServiceServer) {
	s.RegisterService(&FollowUserService_ServiceDesc, srv)
}

func _FollowUserService_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowUserServiceServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FollowUserService/FollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowUserServiceServer).FollowUser(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowUserService_ListFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowUserServiceServer).ListFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FollowUserService/ListFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowUserServiceServer).ListFollowers(ctx, req.(*ListFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowUserService_ListFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowUserServiceServer).ListFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FollowUserService/ListFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowUserServiceServer).ListFollowing(ctx, req.(*ListFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowUserService_ServiceDesc is the grpc.ServiceDesc for FollowUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FollowUserService",
	HandlerType: (*FollowUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowUser",
			Handler:    _FollowUserService_FollowUser_Handler,
		},
		{
			MethodName: "ListFollowers",
			Handler:    _FollowUserService_ListFollowers_Handler,
		},
		{
			MethodName: "ListFollowing",
			Handler:    _FollowUserService_ListFollowing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "follower.proto",
}
